#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *prev;
    struct node *next;
};

struct node* head;
struct node* insert_at_beg(struct node *);
struct node* insert_at_end(struct node *);
struct node* delete_at_beg(struct node *);
struct node* delete_at_end(struct node *);
void display(struct node *);
struct node *temp,*temp1,*newnode;

int main()
{
    head = NULL;
    int ch;

    while(1)
    {
        printf("\n+++++++++++++++++++++++++++++++++++++++++++++\n");
        printf("1---INSERT AT BEGINNING\n");
        printf("2---INSERT AT END\n");
        printf("3---DELETE AT BEGINNING\n");
        printf("4---DELETE AT END\n");
        printf("5---DISPLAY\n");
        printf("6---EXIT(0)\n");
        printf("\n+++++++++++++++++++++++++++++++++++++++++++++\n");

        printf("Enter the choice\n");
        scanf("%d",&ch);

        switch(ch)
        {
            case 1: newnode = ((struct node *) malloc (sizeof(struct node)));
                 if(newnode == NULL)
                 {
                     printf("Memory not allocated\n");
                     exit(0);
                 }

                 else
                 {
                     printf("Enter the data\n");
                     scanf("%d",&newnode->data);
                     head=insert_at_beg(newnode);
                     break;
                 }

        case 2: newnode = newnode = (struct node *)malloc(sizeof (struct node));
                 if(newnode == NULL)
                 {
                     printf("Memory not allocated");

                 }

                 else
                 {
                     printf("Enter the data\n");
                     scanf("%d",&newnode->data);
                     head=insert_at_end(newnode);
                     break;
                 }


        case 3: if(head==NULL)
                printf("Linked list is empty. Hence cannot be deleted\n");
                else
                {
                    head=delete_at_beg(head);
                }
                break;

        case 4: if(head==NULL)
                printf("Linked list is empty. Hence cannot be deleted\n");
                else
                {
                    head=delete_at_end(head);
                }
                break;

        case 5: display(head);
                break;

        case 6: printf("\nExit from the code\n");
                break;


        }

    }

}

struct node * insert_at_beg(struct node * newnode)
{
    if(head == NULL)
    {
        newnode->next = NULL;
        newnode->prev = NULL;
        head = newnode;
    }

    else
    {
       newnode->next = head;
       newnode->prev = NULL;
       head = newnode;
    }

    return (head);
};

struct node * insert_at_end(struct node * newnode)
{
    if(head == NULL)
    {
        newnode->next = NULL;
        newnode->prev = NULL;
        head = newnode;
    }

    else
    {
        temp = head;
        while(temp->next != NULL)
        {
            temp =temp->next;
        }
        temp->next = newnode;
        newnode->prev = temp;
        newnode->next = NULL;
    }

    return (head);
};

struct node * delete_at_beg(struct node *head)
{
   if(head==NULL)
     {
        printf("DLL is empty--cant delete\n");
     }
     else
     {
         if(head->next==head)
         {
            printf("node deleted=%d\n",head->data);
            free(head);
            head=NULL;
         }
         else
         {
             temp=head;
             head=head->next;
             printf("node deleted=%d\n",head->data);
             head->prev=NULL;
             free(head);
         }
     }
     return(head);
}



struct node * delete_at_end(struct node *head)
{
   if(head==NULL)
     {
        printf("DLL is empty--cant delete\n");
     }
     else
     {
         if(head->next==head)
         {
            printf("node deleted=%d\n",head->data);
            free(head);
            head=NULL;
         }
         else
         {
             temp=head;
             while(temp->next!=NULL)
             {
               temp1=temp;
               temp=temp->next;
             }
              printf("node deleted=%d\n",temp->data);
             free(temp);
             temp1->next=NULL;
         }
     }
     return(head);
}



void display(struct node *head)
{
  if(head==NULL)
     {
        printf("DLL is empty i.e there are no nodes present in DLL\n");
     }
     else
     {
         temp=head;
         while(temp!=NULL)
         {
            printf("<-%d->",temp->data);
            temp=temp->next;
         }
     }
}

