#include<iostream>
#include<string>
#include<algorithm>
using namespace std;

string Loc[]={"BVB","VIDYANAGAR","KIMS","HOSURBUSTTAND","HOSURCROSS",
                "CHENNAMMACIRCLE", "CORPORATIONAREA", "AMBEDKARCIRCLE",
                "COURTCIRCLE", "RAILWAYSTATION", "OUTSKIRTS"};

class Login
{
public:
    string usernames[100];
    string passwords[100];
    int numUsers;
    Login():numUsers(0){}

    void addUser(string username,string password)
    {
        if (numUsers<100)
        {
            usernames[numUsers] = username;
            passwords[numUsers] = password;
            numUsers++;
        }
    }

    bool loginUser()
    {
        string inputUsername,inputPassword;
        cout<<"ENTER YOUR USERNAME: ";
        cin>>inputUsername;
        cout<<"ENTER YOUR PASSWORD: ";
        cin>>inputPassword;

        for(int i=0;i<numUsers;i++)
        {
            if(usernames[i]==inputUsername && passwords[i]==inputPassword)
            {
                return true;
            }
        }

        char choice;
        cout<<"INVALID CREDENTIALS."<<endl<<"DO YOU WANT TO REGISTER(--R--) OR TRY AGAIN(--T--)?"<<endl;
        cin>>choice;
        if(choice=='R' || choice=='r')
        {
            registerUser();
        }
        return false;
    }

    void registerUser()
    {
        string newUsername, newPassword;
        cout<<"ENTER A NEW USERNAME: ";
        cin>>newUsername;

        for(int i=0; i<numUsers; i++)
        {
            if (usernames[i]==newUsername)
            {
                cout<<"USERNAME ALREADY EXISTS!!"<<endl<<"TRY AGAIN"<<endl;
                return;
            }
        }

        cout<<"ENTER A NEW PASSWORD: ";
        cin>>newPassword;
        addUser(newUsername,newPassword);
        cout<<"REGISTRATION SUCCESSFULL"<<endl;
    }
};


class Route
{
public:
    string source;
    string destination;
    int s,d;

    Route(){}
    Route(string src,string dest):source(src),destination(dest){}

    void readSource()
    {
        int validSource=0;
        cout<<"SOURCE(FROM):";
        cin>>s;
        for(int i=0;i<11;i++)
        {
            transform(source.begin(),source.end(),source.begin(),::toupper);
            if (s==i+1)
            {
                source=Loc[i];
                validSource=1;
                break;
            }
        }
        if(!validSource)
        {
            cout<<"SOURCE INVALID. "<<endl;
            cout<<"ENTER THE CORRECT NUMBER AS GIVEN IN THE LIST"<<endl;
            readSource();
            return;
        }
    }
    void readDestination()
    {
        int validDestination=0;
        cout<<"DESTINATION(TO) :";
        cin>>d;
        for(int i=0;i<11;i++)
        {
            if(d==i)
            {
                destination=Loc[i];
                validDestination=1;
                break;
            }
        }
        if(!validDestination)
        {
            cout<<"DESTINATION INVALID. "<<endl;
            cout<<"ENTER THE CORRECT NUMBER AS GIVEN IN THE LIST"<<endl;
            readDestination();
            return;
        }
    }
    int checkRoute()
    {
        if(source==destination)
        {
            cout<<"SOURCE AND DESTINATION CANNOT BE SAME.RE-ENTER VALID DETAILS."<<endl;
            readSource();
            readDestination();
        }
        else
        {
            cout<<"ROUTE IS FROM "<<source<<" TO "<<destination<<endl;
            return 0;
        }
    }
};
class Car
{
public:
    string carType;
    string carNo;
    float pricePerKm;
    int maxSeats;

    Car(){}
    Car(string type,string no,int seats,float price)
    :carType(type),carNo(no),maxSeats(seats),pricePerKm(price){}

    void display()
    {
        cout<<"Car Details:"<<endl;
        cout<<"TYPE: "<<carType<<endl;
        cout<<"CAR NUMBER: "<<carNo<<endl;
        cout<<"MAXIMUM SEATS: "<<maxSeats<<endl;
        cout<<"PRICE PER KM: "<<endl;
    }
};
class Ride
{
public:
    public:
    Route route;
    Car car;
    int availableSeats; // Current number of available seats in the car
    int nos;            // Maximum seats in the car

    Ride(){}
    Ride(int seats)
        : availableSeats(availableSeats), nos(seats) {}
    void countRemaining()
    {
        cout<<"REMAINING SEATS "<<nos<<endl;
    }
};
class ExceptionHandler
{
public:

   int checkAdhaarNo(string adhaarNumber)
    {
    try {
        int i;
        if (adhaarNumber.length()!=12)
        {
            cout<<"ADHAAR NUMBER PLATE SHOULD BE TWELVE CHARACTERS LONG." << endl;
            throw 0;
        }
        for(i=0; i<12; i++)
        {
            if(!isdigit(adhaarNumber[i]))
            {
                throw 1;
            }
        }
        //cout<<"VALID"<<endl;
        return 1;
      }
      catch(int e)
      {
        if(e==0)
            cout<<"RE-ENTER THE ADHAAR NUMBER."<<endl;
        else if(e==1)
            cout<<"ALL THE CHARACTERS OF ADHHAR NUMBER SHOULD BE DIGITS."<<endl;
        return 0;
      }
     }
     void checkAge(int age)
     {
      try
      {
          if(age>18)
          {
              cout<<"Valid dl"<<endl;
          }
          else
            throw(age);

      }
      catch(int age)
      {
          cout<<age<<endl;
          cout<<"INVALID DL HENCE,CANNOT BOOK"<<endl;
      }
    }
    int checkDl(string license)
    {
    try {
        int i;
        if (license.length()!=9)
        {
            cout<<"DRIVER'S LICENSE SHOULD BE NINE CHARACTERS LONG." << endl;
            throw 0;
        }
        for(i=0; i<5; i++)
        {
            if(!isdigit(license[i]))
            {
                throw 1;
            }
        }
        for(i=5; i<9; i++)
        {
            if(!isalpha(license[i]))
            {
                throw 2;
            }
        }
        //cout << "VALID" << endl;
        return 1;
    }
    catch(int e)
    {
        if(e==0)
            cout<<"RE-ENTER THE DRIVER LICENSE NUMBER."<<endl;
        else if(e==1)
            cout<<"THE FIRST FIVE CHARACTERS SHOULD BE DIGITS."<<endl;
        else if(e==2)
            cout<<"THE LAST OUR CHARACTERS HSHOULD BE LETTERS1."<<endl;
        return 0;
    }
   }

   int checkCarNo(string carNumber)
    {
    try {
        int i;
        if (carNumber.length()!=9)
        {
            cout<<"CAR NUMBER PLATE SHOULD BE NINE CHARACTERS LONG." << endl;
            throw 0;
        }
        for(i=0; i<2; i++)
        {
            if(!isalpha(carNumber[i]))
            {
                throw 1;
            }
        }
        for(i=2; i<4; i++)
        {
            if(!isdigit(carNumber[i]))
            {
                throw 2;
            }
        }
        for(i=4; i<5; i++)
        {
            if(!isalpha(carNumber[i]))
            {
                throw 3;
            }
        }
        for(i=5; i<9; i++)
        {
            if(!isdigit(carNumber[i]))
            {
                throw 4;
            }
        }
        //cout<<"VALID"<<endl;
        return 1;
    }
    catch(int e)
    {
        if(e==0)
            cout<<"RE-ENTER THE CAR NUMBER."<<endl;
        else if(e==1)
            cout<<"THE FIRST TWO CHARACTERS SHOULD BE LETTERS."<<endl;
        else if(e==2)
            cout<<"THE THIRD AND FORTH CHARACTERS SHOULD BE DIGITS."<<endl;
        else if(e==3)
            cout<<"THE FIFTH CHARACTER HSHOULD BE LETTER."<<endl;
        else if(e==4)
            cout<<"THE LAST FOUR CHARACTERS SHOULD BE DIGITS."<<endl;
        return 0;
    }
   }

};
class User
{
public:
    string name;
    string adhaarNumber;
    ExceptionHandler exceptionhandler;

    User() : name(""){}
    User(string n,string adhaar)
    : name(n),adhaarNumber(adhaar){}
    virtual ~User() {}

    void read()
    {
        cout<<"NAME : ";
        cin>>name;
        int validAdhaar=0;
        while(!validAdhaar)
        {
            cout<<"AADHAR CARD NUMBER(12 DIGITS LONG) : ";
            cin>>adhaarNumber;
            validAdhaar=exceptionhandler.checkAdhaarNo(adhaarNumber);
        }
        cout<<endl;
    }
    virtual void display()
    {
        cout<<"NAME : "<<name<<endl;
        cout<<"ADHAAR NUMBER : "<<adhaarNumber<<endl;
    }
};
class Driver:public User
{
public:
    int age;
    string carNumber;
    string license;

    Route route;
    Car car;
    Ride ride;
    ExceptionHandler exceptionhandler;
    int stdr, destdr;

    Driver(){}
    Driver(string n,string adhaar,int age,string carno,string license)
    :User(n,adhaar),carNumber(carno),license(license){}

    void read()
    {
        User::read();
        while(1)
        {
            cout<<"AGE:(GREATER THAN 18) ";
            cin>>age;
            if(age>18)
            {
                this->age=age;//Update the age in the User class
                break;
            }
            else
            {
                cout<<"DRIVER'S AGE SHOULD BE GREATER THAN 18. RE-ENTER VALID AGE"<<endl;
            }
        }
        int validCar=0;
        while(!validCar)
        {
            cout<<"CAR NUMBER(EXAMPLE-AA11A1111): ";
            cin>>carNumber;
            validCar=exceptionhandler.checkCarNo(carNumber);
        }
        cout<<"MAXIMUM SEATS IN THE CAR(WITHOUT THE DRIVER): ";
        cin>>ride.nos;
        int validLicense=0;
        while (!validLicense)
        {
            cout<<"LICENSE NUMBER(EXAMPLE-11111AAAA): ";
            cin>>license;
            validLicense=exceptionhandler.checkDl(license);
        }
        cout<<endl<<"ROUTE:"<<endl<<"1.BVB"<<endl<<"2.VIDYANAGAR"<<endl<<"3.KIMS"<<endl<<"4.HOSURBUSTTAND"<<endl<<"5.HOSURCROSS"<<endl;
        cout<<"6.CHENNAMMACIRCLE"<<endl<<"7.CORPORATIONAREA"<<endl<<"8.AMBEDKARCIRCLE"<<endl<<"9.COURTCIRCLE"<<endl<<"10.RAILWAYSTATION"<<endl<<"11.OUTSKIRTS"<<endl;
        route.readSource();
        route.readDestination();
        route.checkRoute();
        cout<<"PRICE PER KM: ";
        cin>>car.pricePerKm;
    }
     void display()
    {
        User::display();
        cout<<"AGE: "<<age<<endl;
        cout<<"CAR NUMBER: "<<carNumber<<endl;
        cout<<"MAXIMUM SEATS IN THE CAR(WITHOUT THE DRIVER): "<<ride.nos<<endl;
        cout<<"SOURCE(FROM): "<<route.source<<endl;
        cout<<"DESTINATION(TO): "<<route.destination<<endl;
        cout<<"PRICE PER KM: "<<car.pricePerKm<<endl;
        cout<<"****************************************"<<endl;
    }
};
class Passenger:public User
{
public:
    int nop;
    int age;
    Route route;
    int stp,destp;
    int driverIndex;

    Passenger(){}
    Passenger(string n,string adhaar,int passengers,int a)
    :User(n,adhaar),nop(passengers),age(a){}
    void read()
    {
        User::read();
        cout<<"AGE: ";
        cin>>age;
        cout<<"NO OF PASSENGERS: ";
        cin>>nop;
        cout<<endl<<"ROUTE:"<<endl<<"1.BVB"<<endl<<"2.VIDYANAGAR"<<endl<<"3.KIMS"<<endl<<"4.HOSURBUSTTAND"<<endl<<"5.HOSURCROSS"<<endl;
        cout<<"6.CHENNAMMACIRCLE"<<endl<<"7.CORPORATIONAREA"<<endl<<"8.AMBEDKARCIRCLE"<<endl<<"9.COURTCIRCLE"<<endl<<"10.RAILWAYSTATION"<<endl<<"11.OUTSKIRTS"<<endl;
        route.readSource();
        route.readDestination();
        route.checkRoute();
    }
    void display()
    {
        User::display();
        cout<<"AGE: "<<age<<endl;
        cout<<"SOURCE(FROM) : "<<route.source<<endl;
        cout<<"DESTINATION(TO) : "<<route.destination<<endl;
        cout<<"NO OF PASSENGERS: "<<nop<< endl;
    }
};

int main()
{
    Driver D[100];
    Passenger P[100];
    ExceptionHandler exceptionhandler;
    Login loginSystem;
    int choice,d=0,p=0,confirmchoice;
    int flag=0;
    cout<<"<============WELCOME TO CARPOOLING SYSTEM===========>"<<endl;
while(1)
    {
        START:
        cout<<"\nEnter 1 to enter as a DRIVER"<<endl;
        cout<<"Enter 2 to enter as a PASSENGER"<<endl;
        cout<<"Enter 3 to EXIT the program"<<endl;
        cout<<"ENTER YOUR CHOICE : ";
        cin>>choice;

        switch(choice)
        {
            case 1:
            {
                cout<<"1.LOGIN"<<endl;
                cout<<"2.EXIT"<<endl;
                cout<<"ENTER YOUR CHOICE: ";
                int ch;
                cin>>ch;
                while(1)
                {
                    if(ch==1)
                    {
                        if(loginSystem.loginUser())
                        {
                            cout << "LOGIN SUCCESSFUL!" << endl;
                            D[d].read();
                            cout<<"****************************************"<<endl;
                            cout<<"   THE DRIVER "<<d+1<<" DETAILS ARE  "<<endl;
                            cout<<"****************************************"<<endl;
                            D[d].display();
                            for(int i=0;i<11;i++)
                            {
                                if(D[d].route.source.compare(Loc[i])==0)
                                {
                                    D[d].stdr=i;
                                }
                                if(D[d].route.destination.compare(Loc[i])==0)
                                {
                                    D[d].destdr=i;
                                }
                            }
                            d++;
                            cout<<"****************************************"<<endl;
                            goto START;
                        }

                    }
                    else goto EXIT;
               }
            }

            case 2:
            {
                cout<<"1.LOGIN"<<endl;
                cout<<"2.EXIT"<<endl;
                cout<<"ENTER YOUR CHOICE: ";
                int ch;
                cin>>ch;
                while(1)
                {
                    if(ch==1)
                    {
                        if(loginSystem.loginUser())
                        {
                            P[p].read();
                            cout<<"****************************************"<<endl;
                            cout<<"  THE PASSENGER "<<p+1<<" DETAILS ARE: "<<endl;
                            cout<<"****************************************"<<endl;
                            P[p].display();
                            for(int i=0;i<11;i++)
                            {
                                if(P[p].route.source.compare(Loc[i])==0)
                                {
                                    P[p].stp=i;
                                }
                                if(P[p].route.destination.compare(Loc[i])==0)
                                {
                                    P[p].destp=i;
                                }
                            }
                            break;
                        }

                    }
                    else goto EXIT;
               }
            }
            case 3:
            {
                goto EXIT;
            }

            default:
            {
                cout<<"INVALID CHOICE"<<endl;
                goto START;
            }
        }
        while(1)
        {
            cout<<endl<<"************> AVAILABLE RIDES <***************"<<endl;
            if(P[p].stp>P[p].destp)
            {
                for(int i=0;i<d;i++)
                {
                    if(D[i].stdr>D[i].destdr && D[i].ride.nos!=0)
                    {
                        if(P[p].stp<=D[i].stdr && P[p].destp>=D[i].destdr && P[p].nop<=D[i].ride.nos )
                        {
                            D[i].display();
                            cout<<"ENTER "<<i+1<<" TO CONFIRM YOUR RIDE WITH "<<D[i].name<<" OR 0 TO TO NOT CONFIRM IT"<<endl;
                            cout<<"****************************************"<<endl;
                            flag = 1;

                        }
                    }

                }
            }
            else
            {
                if(P[p].stp<P[p].destp)
                {
                    for(int i=0;i<d;i++)
                    {
                        if(D[i].stdr<D[i].destdr && D[i].ride.nos!=0)
                        {
                            if(P[p].stp>=D[i].stdr && P[p].destp<=D[i].destdr && P[p].nop<=D[i].ride.nos )
                            {
                                D[i].display();
                                cout<<"ENTER "<<i+1<<" TO CONFIRM YOUR RIDE WITH "<<D[i].name<<" OR 0 TO TO NOT CONFIRM IT"<<endl;
                                cout<<"****************************************"<<endl;
                                flag=1;
                            }
                        }
                    }
                }
            }
            if(flag==1)
            {
                cin>>confirmchoice;
                if(confirmchoice!=0)
                {
                    if(D[confirmchoice-1].ride.availableSeats>=P[p].nop)
                    {
                        D[confirmchoice-1].ride.availableSeats-=P[p].nop;
                        cout<<"************************************************"<<endl;
                        cout<<"YOUR RIDE WITH "<<D[confirmchoice-1].name<<" HAS BEN CONFIRMED"<<endl;
                        cout<<"THANK YOU FOR USING OUR CARPOOL SYSTEM.HAVE A SAFE JOURNEY"<<endl;
                        cout<<"              HAVE A SAFE JOURNEY               "<<endl;
                        cout<<"                 DO VISIT AGAIN                 "<<endl;
                        cout<<"************************************************"<<endl;

                    }
                    else
                    {
                        cout<<"************************************************"<<endl;
                        cout<<"YOUR RIDE WITH "<<D[confirmchoice-1].name<<" HAS BEEN CONFIRMED"<<endl;
                        cout<<"     THANK YOU FOR USING OUR CARPOOL SYSTEM      "<<endl;
                        cout<<"        HAVE A SAFE JOURNEY                      "<<endl;
                        cout<<"           DO VISIT AGAIN                        "<<endl;
                        cout<<"************************************************"<<endl;
                    }
                }
                else
                {
                    cout<<"*************************************************"<<endl;
                    cout<<"     THANK YOU FOR USING OUR CARPOOL SYSTEM      "<<endl;
                    cout<<"                 DO VISIT AGAIN                  "<<endl;
                    cout<<"*************************************************"<<endl;
                }
            }
            else
            {
                cout<<"SORRY...!!!NO RIDES AVAILABLE"<<endl;
                cout<<"PLEASE TRY AGIAN"<<endl;
                cout<<"*********************************************"<<endl<<endl;
            }
            goto START;
            EXIT:
            cout<<"EXITING FROM THE CARPOOL SYSTEM";
        }
    }
}
